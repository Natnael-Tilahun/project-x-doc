{"remainingRequest":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/apple/Documents/Projects/Vue/project-x-doc/src/frontend/guide/folder-structure.md?vue&type=template&id=4e7b4a10","dependencies":[{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/src/frontend/guide/folder-structure.md","mtime":1704402760707},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/Documents/Projects/Vue/project-x-doc/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}